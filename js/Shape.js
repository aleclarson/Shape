// Generated by CoffeeScript 1.12.4
var Shape, Validator, assertType, assertTypes, isType, testTypes, wrongType;

assertType = require("assertType");

Validator = require("Validator");

wrongType = require("wrongType");

isType = require("isType");

Shape = Validator.Type("Shape", {
  init: function(name, types) {
    if (isType(name, Object)) {
      types = name;
      name = "Object";
    }
    assertType(name, String);
    assertType(types, Object);
    this.name = name;
    this.types = types;
  },
  test: function(values) {
    return testTypes(values, this.types);
  },
  assert: function(values, path) {
    return assertTypes(values, this.types, path);
  }
});

module.exports = Shape;

testTypes = function(values, types) {
  var key, type;
  if (!isType(values, Object)) {
    return false;
  }
  for (key in types) {
    type = types[key];
    if (isType(type, Object)) {
      if (!testTypes(values[key], type)) {
        return false;
      }
    }
    if (!isType(values[key], type)) {
      return false;
    }
  }
  return true;
};

assertTypes = function(values, types, path) {
  var error, key, type, value;
  if (!isType(values, Object)) {
    return wrongType(Object, path);
  }
  for (key in types) {
    type = types[key];
    value = values[key];
    if (path) {
      key = path + "." + key;
    }
    if (isType(type, Object)) {
      return assertTypes(value, type, key);
    }
    if (type instanceof Validator) {
      if (error = type.assert(value, key)) {
        return error;
      }
    } else if (!isType(value, type)) {
      return wrongType(type, key);
    }
  }
};
